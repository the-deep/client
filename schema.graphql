type CountByDay {
  count: Int!
  date: String!
}

type CountByCentroid {
  count: Int!
  centroid: PointScalar
}

type DeepExploreStatsStatic {
  projectsCountByDay: [CountByDay!]!
  entriesCountByDay: [CountByDay!]!
  leadsCountByDay: [CountByDay!]!
}
type CompleteTimeseries {
  deepExploreStats: DeepExploreStatsStatic!
}

type TopOrganization {
  id: String!
  title: String!
  leadsCount: Int!
  projectsCount: Int!
}

type TopOrganization {
  id: String!
  title: String!
  leadsCount: Int!
  projectsCount: Int!
}

type TopProjectByUsers {
  id: String!
  title: String!
  usersCount: Int!
}

type TopProjectByEntries {
  id: String!
  title: String!
  entriesCount: Int!
  leadsCount: Int!
}

type TopProjectByLeads {
  id: String!
  title: String!
  entriesCount: Int!
  leadsCount: Int!
}

type TopFramework {
  id: String!
  title: String!
  entriesCount: Int!
  projectsCount: Int!
}

type ProjectsByRegion {
  id: String!
  projectIds: [String!]
  centroid: PointScalar
}

type YearlySnapshotData {
  totalActiveUsers: Int!
  totalAuthors: Int!
  totalEntries: Int!
  totalEntriesAddedLastWeek: Int!
  totalLeads: Int!
  totalProjects: Int!
  totalPublishers: Int!
  totalRegisteredUsers: Int!
  topTenPublishers: [TopOrganization!]!
  topTenAuthors: [TopOrganization!]!
  topTenProjectsByUsers: [TopProjectByUsers!]!
  topTenProjectsByEntries: [TopProjectByEntries!]!
  topTenProjectsByLeads: [TopProjectByLeads!]!
  topTenFrameworks: [TopFramework!]!
  projectsByRegion: [ProjectsByRegion!]!
  entriesCountByRegion: [CountByCentroid!]!
}

type YearlySnapshot {
  deepExploreStats: YearlySnapshotData!
}

type MergedAsOrganization {
    id: String!
    title: String!
    verified: Boolean
    shortName: String
}

type Organization {
    id: String!
    title: String!
    verified: Boolean
    shortName: String
    mergedAs: MergedAsOrganization
}

enum BorderStyleEnum {
  DASHED
  DOTTED
  DOUBLE
  NONE
  SOLID
}

type BorderStyle {
  width: Int
  color: String
  opacity: Int
  style: BorderStyleEnum
}

type PaddingStyle {
  top: Int
  bottom: Int
  right: Int
  left: Int
}

type BackgroundStyle {
  color: String
  opacity: Int
}

enum Align {
  CENTER
  END
  JUSTIFIED
  START
}

type TextStyle {
  align: Align
  color: String
  family: String
  size: Int
  weight: Int
}

type FileType {
  id: String!
}

type ContentUploadType {
  id: String!
  file: FileType
}

type ContentDataType {
  id: String!
  clientId: String!
  data: GenericScalar
  upload: ContentUploadType
}

type ReportContainerStyle {
  border: BorderStyle
  padding: PaddingStyle
  background: BackgroundStyle
}

type HeadingConfigurationStyleType {
  content: TextStyle
}

enum HeadingVariant {
  H1
  H2
  H3
  H4
}

type HeadingConfigurationType {
  content: String
  variant: HeadingVariant
  style: HeadingConfigurationStyleType
}

enum ImageFit {
  CONTAIN
  COVER
  FILL
  NONE
  SCALE_DOWN
}

type ImageConfigurationStyleType {
  caption: TextStyle
  fit: ImageFit
}

type ImageConfigurationType {
  altText: String
  caption: String
  style: ImageConfigurationStyleType
}

type TextConfigurationStyleType {
  content: TextStyle
}

type TextConfigurationType {
  content: String
  style: TextConfigurationStyleType
}

type UrlConfigurationType {
  url: String
}

type KpiItemConfigType {
  abbreviateValue: String
  clientId: String
  color: String
  date: String
  source: String
  sourceUrl: String
  subtitle: String
  title: String
  value: Int
}

type KpiConfigurationType {
  items: [KpiItemConfigType!]
  sourceContentStyle: TextConfigurationStyleType
  subtitleContentStyle: TextConfigurationStyleType
  titleContentStyle: TextConfigurationStyleType
  valueContentStyle: TextConfigurationStyleType
}

type ContentConfigurationType {
  heading: HeadingConfigurationType
  image: ImageConfigurationType
  text: TextConfigurationType
  url: UrlConfigurationType
  kpi: KpiConfigurationType
}

enum ReportContentEnum {
  HEADING
  IMAGE
  TEXT
  URL
}

type ReportContainer {
  id: String!
  clientId: String!
  row: Int
  column: Int
  width: Int
  height: Int
  contentType: ReportContentEnum
  style: ReportContainerStyle
  contentData: [ContentDataType!]
  contentConfiguration: ContentConfigurationType
  isPublic: Boolean
  modifiedAt: String
}

type GeneralHeadingContentStyle {
  h1: TextStyle
  h2: TextStyle
  h3: TextStyle
  h4: TextStyle
}

type BodyStyleConfig {
  gap: Int
}

type GeneralConfiguration {
  containerStyle: ReportContainerStyle
  textContentStyle: TextConfigurationStyleType
  imageContentStyle: ImageConfigurationStyleType
  headingContentStyle: GeneralHeadingContentStyle
  bodyStyle: BodyStyleConfig
}

type PublicReportDetails {
  id: String!
  analysis: String!
  title: String!
  subTitle: String
  slug: String!
  organizations: [Organization!]
  containers: [ReportContainer!]
  configuration: GeneralConfiguration
  isPublic: Boolean
  modifiedAt: String
}

type Query {
  completeTimeseries(pathName: String!): CompleteTimeseries!
  yearlySnapshot(pathName: String!): YearlySnapshot!
  publicReportDetails(pathName: String!): PublicReportDetails!
}

directive @rest(
  type: String!
  path: String!
  endpoint: String!
  method: String
) on FIELD
